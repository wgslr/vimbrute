//! Code based on MIT-licensed vimdecrypt-rs:
//! <https://github.com/SirVer/vimdecrypt-rs/blob/master/src/lib.rs>

use generic_array::GenericArray;
use sha2;
use sha2::Digest;

use blowfish::block_cipher::{BlockCipher, NewBlockCipher};

type BlowfishBE = blowfish::Blowfish<byteorder::BigEndian>;

/// # Arguments
///
/// - `all_data` - encrypted data, without vim's encryption type marker.
///
/// # Examples
/// ```
/// let data = [
///     0x79, 0x1d, 0x67, 0xb8, 0x3b, 0xfd, 0x7a, 0x1e, 0x68, 0xcb, 0xab,
///     0x17, 0x0c, 0x42, 0xae, 0x39, 0x70, 0x93, 0xab, 0xa3, 0xc9, 0x32
/// ];
/// assert_eq!(
///     vimbrute::crypto::blowfish2_decrypt(&data, "123"),
///     b"short\n"
/// );
/// ```
pub fn blowfish2_decrypt(all_data: &[u8], password: &str) -> Vec<u8> {
    let salt = &all_data[0..8];
    let mut iv = all_data[8..16].to_vec();
    let data = all_data[16..].to_vec();

    let key = hashpw(password, salt);
    let bf = BlowfishBE::new_varkey(&key).unwrap();

    let mut xor = vec![8; 0];
    let mut plaintext = Vec::new();
    for o in 0..data.len() {
        if o % 8 == 0 {
            wordswap(&mut iv);
            bf.encrypt_block(&mut GenericArray::from_mut_slice(&mut iv));
            wordswap(&mut iv);
            xor = iv;
            iv = data[o..(o + 8).min(data.len())].to_vec();
        }
        plaintext.push(xor[o % 8] ^ data[o]);
    }
    plaintext
}

pub fn is_utf8_prefix(data: &[u8]) -> bool {
    let s = String::from_utf8_lossy(data);
    // allow mid-character break at the end of the data
    let without_ending_split = s.strip_suffix('\u{fffd}').unwrap_or(&s); // fffd is the unknown codepoint character
    !without_ending_split.contains('\u{fffd}')
}

fn sha256(password: &[u8], salt: &[u8]) -> Vec<u8> {
    let mut hasher = sha2::Sha256::default();

    hasher.update(password);
    hasher.update(salt);
    hasher.finalize().to_vec()
}

fn hashpw(password: &str, salt: &[u8]) -> Vec<u8> {
    let mut key = sha256(password.as_bytes(), salt);
    for _ in 0..1000 {
        key = sha256(hex::encode(&key).as_bytes(), salt);
    }
    key
}

fn wordswap(a: &mut [u8]) {
    debug_assert_eq!(a.len(), 8);
    a.swap(0, 3);
    a.swap(1, 2);
    a.swap(4, 7);
    a.swap(5, 6);
}

#[cfg(test)]
mod test {

    use super::*;
    use ::test::Bencher;

    #[test]
    fn decrypt() {
        let data = [
            0x79, 0x1d, 0x67, 0xb8, 0x3b, 0xfd, 0x7a, 0x1e, 0x68, 0xcb, 0xab, 0x17, 0x0c, 0x42,
            0xae, 0x39, 0x70, 0x93, 0xab, 0xa3, 0xc9, 0x32,
        ];
        assert_eq!(blowfish2_decrypt(&data, "123"), b"short\n");
    }

    #[test]
    fn hash_password() {
        let pass = "some password";
        let salt: [u8; 8] = [0x19, 0xd3, 0x58, 0x69, 0x58, 0x0b, 0x69, 0xf2];
        assert_eq!(
            hashpw(pass, &salt),
            vec![
                251, 147, 248, 207, 215, 71, 122, 234, 26, 248, 78, 67, 69, 220, 104, 43, 155, 33,
                141, 161, 137, 165, 99, 240, 38, 88, 15, 103, 212, 80, 176, 153
            ]
        )
    }

    #[test]
    fn utf8_detection() {
        let bytes = "żołć".as_bytes();
        assert_eq!(true, is_utf8_prefix(&bytes));
        assert_eq!(true, is_utf8_prefix(&bytes[..bytes.len() - 1]));
        // 0xF0 should begin 4-byte character
        assert_eq!(
            false,
            is_utf8_prefix(&[0xF0, 0xbc, 0xc3, 0xb3, 0xc5, 0x82, 0xc4, 0x87])
        );
    }

    #[bench]
    fn hashpw_bench(bench: &mut Bencher) {
        let pass = "some password";
        let salt: [u8; 8] = [0x19, 0xd3, 0x58, 0x69, 0x58, 0x0b, 0x69, 0xf2];
        bench.iter(|| hashpw(pass, &salt))
    }

    #[bench]
    fn decrypt_bench(bench: &mut Bencher) {
        let data: Vec<u8> = vec![
            0xf8, 0x07, 0x8b, 0xf1, 0xdc, 0xe3, 0xba, 0xd9, 0x59, 0xc3, 0xb0, 0xbf, 0x43, 0xe7,
            0xb7, 0x61, 0x50, 0x5e, 0xd0, 0x43, 0x66, 0x69, 0x74, 0x35, 0xd6, 0xa8, 0xb3, 0xcc,
            0xfa, 0x5c, 0xfd, 0x6b, 0xa7, 0x82, 0xbf, 0x88, 0xf2, 0x24, 0x21, 0x36, 0x08, 0xd0,
            0x72, 0x08, 0x0e, 0x87, 0x42, 0x4b, 0xb6, 0xd8, 0xdc, 0x1b, 0x8c, 0xf7, 0xd7, 0x88,
            0x64, 0x2f, 0x9c, 0x7e, 0x11, 0x38, 0x24, 0x06, 0x7e, 0x54, 0xa8, 0xe3, 0x4b, 0x90,
            0x88, 0x34, 0x02, 0x10, 0x09, 0xef, 0x8b, 0xf1, 0x91, 0x8b, 0x78, 0xbd, 0x26, 0x66,
            0xc6, 0x2e, 0xc1, 0x35, 0xeb, 0xc0, 0xf0, 0xee, 0xdd, 0x08, 0xc8, 0xa6, 0x24, 0xe2,
            0x2a, 0x71, 0x71, 0x62, 0xd4, 0x7e, 0x42, 0xa6, 0x42, 0x98, 0x40, 0x6d, 0xf9, 0x72,
            0x37, 0x19, 0x46, 0x30, 0xb0, 0x76, 0x55, 0x1a, 0x89, 0x75, 0x29, 0x72, 0x3e, 0x75,
            0xc1, 0x3c, 0xb4, 0x0c, 0xda, 0x21, 0xe4, 0x1f, 0x35, 0x7e, 0x12, 0xf8, 0x8d, 0x5e,
            0x67, 0x14, 0x5b, 0x6b, 0x43, 0xf1, 0x9a, 0xcc, 0x2d, 0xce, 0x03, 0xb5, 0x10, 0x11,
            0xc7, 0x14, 0x4d, 0x15, 0x8e, 0xa0, 0xfe, 0xfc, 0x2c, 0x0c, 0xcf, 0x07, 0xf8, 0x46,
            0x34, 0x22, 0xf1, 0x57, 0xee, 0x46, 0x20, 0x7c, 0x8d, 0x73, 0x35, 0xf7, 0xd7, 0xd9,
            0x22, 0xcf, 0x4a, 0xc8, 0xfd, 0x61, 0xb4, 0x02, 0xbc, 0xcd, 0xc2, 0x9e, 0x80, 0xb0,
            0x1f, 0xa6, 0x27, 0xca, 0xa7, 0xac, 0x28, 0xe3, 0xf8, 0x9d, 0xa8, 0x79, 0xbe, 0x2a,
            0x24, 0xb8, 0x5e, 0x5e, 0x2b, 0x54, 0xd8, 0x28, 0xdb, 0xf2, 0x64, 0x32, 0xbd, 0x72,
            0x04, 0x19, 0xce, 0xa7, 0x06, 0x8c, 0x6f, 0x22, 0xc5, 0xb6, 0x6f, 0x68, 0xc1, 0x03,
            0x40, 0x5a, 0xb1, 0xaf, 0xd6, 0xee, 0xf9, 0xf1, 0x48, 0x30, 0xec, 0x04, 0x3a, 0x32,
            0x6c, 0x8e, 0xf3, 0x37,
        ];
        bench.iter(|| blowfish2_decrypt(&data, "somepassword"))
    }
}
